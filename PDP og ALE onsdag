library(data.table)
library(ggplot2)
library(mlr3)
library(mlr3learners)
library(mlr3tuning)
library(mlr3mbo)
library(glmnet)
library(OpenML)
library(mlr3pipelines)
library(mlr3filters)
library(tidyr)
library(dplyr)
library(glex)
library(xgboost)
library(patchwork)
library(DALEX)
library(DALEXtra)
library(ALEPlot)


set.seed(732)

future::plan("multisession")
data = fread("Motor vehicle insurance data.csv")

cond_1 = which(data$Distribution_channel != 1 & data$Distribution_channel != 0)
data$Distribution_channel[cond_1] = matrix(data= NA, nrow=length(cond_1))

#Initialize data
data$ID = as.factor(data$ID)
data$Distribution_channel = as.numeric(data$Distribution_channel)
data$Payment = as.numeric(data$Payment)
data$Type_risk = as.factor(data$Type_risk)
data$Area = as.numeric(data$Area)
data$Second_driver = as.numeric(data$Second_driver)
data$N_doors = as.factor(data$N_doors)
data$Type_fuel = as.factor(data$Type_fuel)

data$Date_start_contract = as.Date(data$Date_start_contract, format = "%d/%m/%Y")
data$Date_start_contract = as.numeric(data$Date_start_contract)
data$Date_birth = as.Date(data$Date_birth, format = "%d/%m/%Y")
data$Date_birth = as.numeric(data$Date_birth)
data$Date_driving_licence = as.Date(data$Date_driving_licence, format = "%d/%m/%Y")
data$Date_driving_licence = as.numeric(data$Date_driving_licence)


data_num = data[,lapply(.SD, mean, na.rm = TRUE), by = ID, .SDcols = is.numeric]
data_num = data_num[,-c("Lapse", "Premium", "N_claims_year", "N_claims_history","R_Claims_history")]
data_fac = data[,lapply(.SD, function(x) x[1]), by = ID, .SDcols = is.factor]
data = merge(data_num, data_fac[,-1], by = "ID")[,-1]

# Step 2: Calculate how many times each ID occurs in the original data
id_counts <- table(fread("Motor vehicle insurance data.csv")$ID)

# Step 3: Expand the reduced 'data' to match the number of rows in the original data
data = data[,Exposure:=id_counts[as.character(data_fac$ID)]]
data = data[,!"Date_start_contract"]
data_target = data$Cost_claims_year
data_X = data[,-"Cost_claims_year"]

data_X[is.na(get("Length")),("Length"):=mean(data_X[["Length"]],na.rm=TRUE)]

#Impute missing data DC,TF
data_X[is.na(get("Distribution_channel")), 
       ("Distribution_channel") := sample(data_X[!is.na(get("Distribution_channel")), get("Distribution_channel")],
                                          .N, replace = TRUE)]
data_X[is.na(get("Type_fuel")), 
       ("Type_fuel") := sample(data_X[!is.na(get("Type_fuel")), get("Type_fuel")],
                               .N, replace = TRUE)]
data_X$Exposure = as.numeric(data_X$Exposure)
data_X$Payment = as.numeric(data_X$Payment)
data_X$Distribution_channel = as.numeric(data_X$Distribution_channel)
data_X$Area = as.numeric(data_X$Area)
data_X$Second_driver = as.numeric(data_X$Second_driver)
data_X$Type_fuel = as.numeric(ifelse(data_X$Type_fuel == "P", 1, ifelse(data_X$Type_fuel == "D", 0, data_X$Type_fuel)))

data_matrix = model.matrix(~.-1, data= data_X)
data_task = as.data.table(data_matrix)
data_task[,Cost_claims_year:=data_target]

############
##ML model##
############

task_xg = as_task_regr(data_task, target="Cost_claims_year")
task_xg$set_col_roles("Exposure", roles = "weight")

lrn_featureless = lrn("regr.featureless")

at_xgboost = auto_tuner(tuner = tnr("random_search", batch_size = 8),
                        learner = lrn("regr.xgboost",
                                      max_depth = 2, 
                                      nrounds = to_tune(100,500), 
                                      eta = to_tune(0.1,0.3)),
                        resampling = rsmp("cv", folds = 5),
                        measure = msr("regr.mae"),
                        terminator = trm("evals", n_evals = 16))


design = benchmark_grid(
  tasks = task_xg, 
  learners = list(at_xgboost, lrn_featureless),
  resamplings = rsmp("cv", folds=5)
)

design
results = benchmark(design)

results$aggregate(list(msr("regr.mse"),msr("regr.mae")))

at_xgboost$train(task_xg)
at_xgboost$archive$best()


lrn_xgboost = lrn("regr.xgboost",
                  max_depth = 2, 
                  nrounds = 155, 
                  eta = 0.1657)

lrn_xgboost$train(task_xg)

#################
##Visualisation##
#################

predictions = lrn_xgboost$predict(task_xg)$response
hist(predictions[predictions<0])



####################
##Interpretebility##
####################

data_exp = data_task[,-c("Cost_claims_year","Exposure")]

res = glex(lrn_xgboost$model, data_matrix[,-27])

xgboost_exp = explain_mlr3(lrn_xgboost,
                            data = data_exp,
                            y = data_task$Cost_claims_year,
                            label = "Claims",
                            colorize = FALSE)

##Importance plot##

theme_set(theme_minimal(base_size = 13))
vi_xgb <- glex_vi(res) 

p_vi <- autoplot(vi_xgb, threshold = 2) + 
  labs(title = NULL, tag = "")

p_vi

##ICE plot##

random_rows_30 <- sample(1:nrow(data_task), 30)
features = c(
             "Payment")

ice = predict_profile(xgboost_exp, 
                      new_observation = data_exp[random_rows_30], 
                      variables = features)

plot(ice, variables = features)


##ALE + PDP plot##

predict_hack <- function(X.model, newdata) {
  return(predict(object = X.model, newdata = newdata))
}

ale_cyl <- ALEPlot(X = data_exp, X.model = lrn_xgboost, pred.fun = predict_hack, J = 13, K = 220)
pdp_cyl <- PDPlot(X = data_exp, X.model = lrn_xgboost, pred.fun = predict_hack, J = 13, K = 100)


ale_len <- ALEPlot(X = data_exp, X.model = lrn_xgboost, pred.fun = predict_hack, J = 15)
pdp_len <- PDPlot(X = data_exp, X.model = lrn_xgboost, pred.fun = predict_hack, J = 15, K=38)


ale_driv_lic <- ALEPlot(X = data_exp, X.model = lrn_xgboost, pred.fun = predict_hack, J = 2)
pdp_driv_lic <- PDPlot(X = data_exp, X.model = lrn_xgboost, pred.fun = predict_hack, J = 2, K=41)


ale_birth <- ALEPlot(X = data_exp, X.model = lrn_xgboost, pred.fun = predict_hack, J = 1)
pdp_birth <- PDPlot(X = data_exp, X.model = lrn_xgboost, pred.fun = predict_hack, J = 1, K=41)

#####################################

df <- data.frame(
  xale = ale_cyl$x.values,
  fale = ale_cyl$f.values,
  xpdp = pdp_cyl$x.values,
  fpdp = pdp_cyl$f.values
)

# Reshape into long format
df_long <- bind_rows(
  data.frame(x = df$xale, y = df$fale - mean(df$fale), method = "ALE"),
  data.frame(x = df$xpdp, y = df$fpdp - mean(df$fpdp), method = "PDP")
)

# Plot with proper color mapping
ggplot(df_long, aes(x = x, y = y, color = method)) +
  geom_line() +
  scale_color_manual(values = c("ALE" = "#01665e", "PDP" = "#bf812d")) +
  labs(color = "Method", title = "", x = "Cylinder capacity", y = "Response")

#####################################

df <- data.frame(
  xale = ale_len$x.values,
  fale = ale_len$f.values,
  xpdp = pdp_len$x.values,
  fpdp = pdp_len$f.values
)

# Reshape into long format
df_long <- bind_rows(
  data.frame(x = df$xale, y = df$fale - mean(df$fale), method = "ALE"),
  data.frame(x = df$xpdp, y = df$fpdp - mean(df$fpdp), method = "PDP")
)

# Plot with proper color mapping
ggplot(df_long, aes(x = x, y = y, color = method)) +
  geom_line() +
  scale_color_manual(values = c("ALE" = "#01665e", "PDP" = "#bf812d")) +
  labs(color = "Method", title = "", x = "Length", y = "Response")

#####################################

df <- data.frame(
  xale = ale_driv_lic$x.values,
  fale = ale_driv_lic$f.values,
  xpdp = pdp_driv_lic$x.values,
  fpdp = pdp_driv_lic$f.values
)

# Reshape into long format
df_long <- bind_rows(
  data.frame(x = df$xale, y = df$fale - mean(df$fale), method = "ALE"),
  data.frame(x = df$xpdp, y = df$fpdp - mean(df$fpdp), method = "PDP")
)

# Plot with proper color mapping
ggplot(df_long, aes(x = x, y = y, color = method)) +
  geom_line() +
  scale_color_manual(values = c("ALE" = "#01665e", "PDP" = "#bf812d")) +
  labs(color = "Method", title = "", x = "Date driving licence", y = "Response")

#####################################

df <- data.frame(
  xale = ale_birth$x.values,
  fale = ale_birth$f.values,
  xpdp = pdp_birth$x.values,
  fpdp = pdp_birth$f.values
)

# Reshape into long format
df_long <- bind_rows(
  data.frame(x = df$xale, y = df$fale - mean(df$fale), method = "ALE"),
  data.frame(x = df$xpdp, y = df$fpdp - mean(df$fpdp), method = "PDP")
)

# Plot with proper color mapping
ggplot(df_long, aes(x = x, y = y, color = method)) +
  geom_line() +
  scale_color_manual(values = c("ALE" = "#01665e", "PDP" = "#bf812d")) +
  labs(color = "Method", title = "", x = "Date Birth", y = "Response")

#####################################





















