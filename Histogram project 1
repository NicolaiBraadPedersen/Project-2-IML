#DATA
future::plan("multisession")
data = fread("Motor vehicle insurance data.csv")

cond_1 = which(data$Distribution_channel != 1 & data$Distribution_channel != 0)
data$Distribution_channel[cond_1] = matrix(data= NA, nrow=length(cond_1))

#Initialize data
data$ID = as.factor(data$ID)
data$Distribution_channel = as.numeric(data$Distribution_channel)
data$Payment = as.numeric(data$Payment)
data$Type_risk = as.factor(data$Type_risk)
data$Area = as.numeric(data$Area)
data$Second_driver = as.numeric(data$Second_driver)
data$N_doors = as.factor(data$N_doors)
data$Type_fuel = as.factor(data$Type_fuel)

data$Date_start_contract = as.Date(data$Date_start_contract, format = "%d-%m-%Y")
data$Date_start_contract = as.numeric(data$Date_start_contract)
data$Date_birth = as.Date(data$Date_birth, format = "%d-%m-%Y")
data$Date_birth = as.numeric(data$Date_birth)
data$Date_driving_licence = as.Date(data$Date_driving_licence, format = "%d-%m-%Y")
data$Date_driving_licence = as.numeric(data$Date_driving_licence)

data_num = data[,lapply(.SD, mean, na.rm = TRUE), by = ID, .SDcols = is.numeric]
data_num = data_num[,-c("Lapse", "Premium", "N_claims_year", "N_claims_history")]
data_fac = data[,lapply(.SD, function(x) x[1]), by = ID, .SDcols = is.factor]
data = merge(data_num, data_fac[,-1], by = "ID")[,-1]
data = data[!is.na(Length)]
data_target = data$Cost_claims_year
data_X = data[,-"Cost_claims_year"]

data_X[is.na(get("Distribution_channel")), 
       ("Distribution_channel") := sample(data_X[!is.na(get("Distribution_channel")), get("Distribution_channel")],
                                          .N, replace = TRUE)]
data_X[is.na(get("Type_fuel")), 
       ("Type_fuel") := sample(data_X[!is.na(get("Type_fuel")), get("Type_fuel")],
                               .N, replace = TRUE)]
data_X$Payment = as.numeric(as.character(data_X$Payment))
data_X$Distribution_channel = as.numeric(as.character(data_X$Distribution_channel))
data_X$Area = as.numeric(as.character(data_X$Area))
data_X$Second_driver = as.numeric(as.character(data_X$Second_driver))
data_X$Type_fuel = as.numeric(ifelse(data_X$Type_fuel == "P", 1, ifelse(data_X$Type_fuel == "D", 0, data_X$Type_fuel)))

data_matrix = model.matrix(~.-1, data= data_X)
data_task = as.data.table(data_matrix)
data_task[,Cost_claims_year:=data_target] 

#Learners from project 1
lrn_classif = lrn("classif.xgboost", predict_type="prob",
                  eta=0.1008, max_depth=4, nrounds=289)
lrn_freq = lrn("regr.xgboost", eta= 0.1876, max_depth=2, nrounds = 255)

lrn_y_tmp = lrn("regr.xgboost", eta = 0.2093, nrounds = 211, max_depth = 2)

lrn_y = as_learner(ppl("targettrafo", 
                       graph = lrn_y_tmp,
                       targetmutate.trafo = function(x) log(x),
                       targetmutate.inverter = function(x) list(response=exp(x$response))))


#MAKE TASKS
data_classif_cv = copy(data_task)[, Claims := as.integer(Cost_claims_year > 0)]
task_classif_cv = as_task_classif(data_classif_cv[, !c("Cost_claims_year","R_Claims_history")], target = "Claims")

data_freq_cv = data_task[Cost_claims_year > 0 & R_Claims_history > 0]
task_freq_cv = as_task_regr(data_freq_cv[, !"Cost_claims_year"], target = "R_Claims_history")

data_y_cv = copy(data_freq_cv)[, Claim_size := Cost_claims_year / R_Claims_history]
data_y_cv = data_y_cv[,-c("R_Claims_history","Cost_claims_year")]
task_y_cv = as_task_regr(data_y_cv, target = "Claim_size")
data_test = data_task[,-c("Cost_claims_year","R_Claims_history")]



#Train learners
lrn_classif$train(task_classif_cv)
lrn_freq$train(task_freq_cv)
lrn_y$train(task_y_cv)

predict_y = lrn_y$predict_newdata(data_test)$response
hist(predict_y[predict_y_tmp<2000])
predict_freq = lrn_freq$predict_newdata(data_test)$response
hist(predict_freq)

predict_classif = lrn_classif$predict_newdata(data_test)$prob[,"1"]
predict_total = predict_y*predict_freq*predict_classif
hist(predict_total[predict_total<1000])
boxplot(predict_total[predict_total<1000])
MSE_total = mean((predict_total-data_task$Cost_claims_year)^2)
MSE_total
